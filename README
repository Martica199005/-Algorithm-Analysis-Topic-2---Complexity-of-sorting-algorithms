The goal of the theme is to implement well-known sorting algorithms and design their execution times. 
Based on the graphs, it is desired to observe the complexity algorithms.

1)Implement the insertionsort function in python, which receives a list and a sort ascending using the insertion sort algorithm (sorting by insertion). 


2)Implement in python the mergesort function that receives a list and a sort ascending using the merge sort algorithm (sorting by interclassing).


For the points 3 and 4, the file lists.py was imported and the functions insertionsort and mergesort were applied to the lists.
The elapsed time was measured with time.process_time().
Each line of the files insertionsort.out and mergesort.out contain the length of the list and the execution time of  the algorithm (measured in seconds), separated by space.

insertionsort.out and mergesort.out were converted in dat files with the same names and they were used in gnuplot to make the fit.
The insertionsort data was projected to a graph with the function f(x)= C*x*x where C=1.29887e-07, in this way it can be observed that the execution times for 
insertion sort belong O(n2).
In the same way,the mergesort data was projected to a graph with the function f(x)= C*x*log(x) where C=1.12439e-06 and it can be observed that the execution times for 
insertion sort belong O(n log (n)).






